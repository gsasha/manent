CHANGELOG:

0.10.0

- fix permissions for db files

- Switch to new container format that unifies headers with data files,
  and stores summary headers inside data files as blocks of a special type.

  The summary headers are generated in the following way:
  Container 0 has header 0.
  Container 1 has header 1 and 0
  Container 2 has header 2.
  Container 3 has header 3, 2, 1, 0.
  In general, for container i, if k is the maximal s.t. 2^k divides i+1,
  2^k previous headers are allowed to be stored.
  A limit to that is that the summary headers are not allowed to take more
  than 2^k * <standard header size> (standard header size is a heuristic
  constant, currently <container size>/1024).

  Container reading algorithm proceeds as follows:
  k = <last container's index>
  while (not all containers are read) {
    read all headers from k
    k = <index of last unread header>
  }

  This process is guaranteed to converge to reading headers from containers
  that have a large number of them, therefore obviating the need for separate
  summary files.

- Change the implementation of aside container to avoid actually using a
  container. Since the blocks stored in aside container are usually not
  compressible, we can safely assume that the size of the blocks we have
  accumulated is about the same size that they will take in the container.

- Integration testing.

FEATURES PLANNED FOR 1.0

- Avoid compressing files that are .zip, .jpg etc.

- Make sure the container reports its size accurately during construction
  (including data that is to be compressed).

- Write more metadata to increment, such as backup name, machine name etc.

- add option "compare=" to "Manent.py test"

- Implement storage queueing. After that, make sure that if process crashes
  after uploading container, it still can continue.

- Add options for storage and exclusion reconfiguration

- Make sure several DB's can open in parallel (probably it's the DB_JOINENV
  flag).
  http://pybsddb.sourceforge.net/ref/env/faq.html

- Make sure data reloads correctly on storage manager load

FEATURES PLANNED FOR 1.X

- Provide a more accurate estimate of progress

- Add executable to create summary headers over existing backup

- Create compiled executables out of the Python source

- Add a filesystem interface for Linux (FUSE)

- Add a filesystem interface as a http or ftp server

- Write parsing plugins for MP3, JPG, ZIP, .o, .a, .so

- Consider adding curses-based interface

- Improve "info" command

- Add capability to backup to Amazon S3

- Add capability to backup to optical media

- Add capability to backup to email

FEATURES PLANNED FOR 2.0

- Add GUI interface

- Add automatic scheduling interface

------------------------------------
CHANGELOG V0.9.7:

- Check that name of backup does not collide with existing files

- Organize file names in ~/.manent

- Add copyright statement in every file

- Remove flush method from Node

- Add "info" command

- Make sure that all aside blocks are saved in the end

- Make sure that aside blocks registered in BlockManager are always sent out to a container. Possible solution: have a database of blocks that were put aside. For that, move BlockManager to within StorageManager (which makes sense anyway).

- Write the caching of hash(path)->digest for directories for faster restart of scanning

- Reconstruct the list of increments.

- make sure that container bodies of containers with metadata are read

- Remove the base_fs_digests

- Remove dump_intermediate from IncrementManager

- Add command line parameters to configure exclusion engine

- Add automatic exclusion rules for Linux

- Add reading of exclusion rules from ~/.manent/exclusion_rules

